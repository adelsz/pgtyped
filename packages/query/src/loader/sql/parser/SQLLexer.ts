// Generated from src/loader/sql/grammar/SQLLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SQLLexer extends Lexer {
	public static readonly ID = 1;
	public static readonly OPEN_COMMENT = 2;
	public static readonly S_REQUIRED_MARK = 3;
	public static readonly WORD = 4;
	public static readonly EOF_STATEMENT = 5;
	public static readonly WSL = 6;
	public static readonly STRING = 7;
	public static readonly PARAM_MARK = 8;
	public static readonly WS = 9;
	public static readonly TRANSFORM_ARROW = 10;
	public static readonly SPREAD = 11;
	public static readonly NAME_TAG = 12;
	public static readonly TYPE_TAG = 13;
	public static readonly OB = 14;
	public static readonly CB = 15;
	public static readonly COMMA = 16;
	public static readonly C_REQUIRED_MARK = 17;
	public static readonly ANY = 18;
	public static readonly CLOSE_COMMENT = 19;
	public static readonly CAST = 20;
	public static readonly COMMENT = 1;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "COMMENT",
	];

	public static readonly ruleNames: string[] = [
		"QUOT", "ID", "OPEN_COMMENT", "SID", "S_REQUIRED_MARK", "WORD", "SPECIAL", 
		"EOF_STATEMENT", "WSL", "STRING", "PARAM_MARK", "CAST", "CID", "WS", "TRANSFORM_ARROW", 
		"SPREAD", "NAME_TAG", "TYPE_TAG", "OB", "CB", "COMMA", "C_REQUIRED_MARK", 
		"ANY", "CLOSE_COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, "'/*'", undefined, undefined, "';'", undefined, 
		undefined, "':'", undefined, "'->'", "'...'", "'@name'", "'@param'", "'('", 
		"')'", "','", undefined, undefined, "'*/'", "'::'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ID", "OPEN_COMMENT", "S_REQUIRED_MARK", "WORD", "EOF_STATEMENT", 
		"WSL", "STRING", "PARAM_MARK", "WS", "TRANSFORM_ARROW", "SPREAD", "NAME_TAG", 
		"TYPE_TAG", "OB", "CB", "COMMA", "C_REQUIRED_MARK", "ANY", "CLOSE_COMMENT", 
		"CAST",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SQLLexer._LITERAL_NAMES, SQLLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SQLLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SQLLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "SQLLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return SQLLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SQLLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SQLLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SQLLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x16\xA1\b\x01" +
		"\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06" +
		"\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f" +
		"\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04" +
		"\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04" +
		"\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x03\x03\x03" +
		"\x07\x039\n\x03\f\x03\x0E\x03<\v\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x06\x07J" +
		"\n\x07\r\x07\x0E\x07K\x03\b\x06\bO\n\b\r\b\x0E\bP\x03\b\x03\b\x03\t\x03" +
		"\t\x03\n\x06\nX\n\n\r\n\x0E\nY\x03\n\x03\n\x03\v\x03\v\x03\v\x07\va\n" +
		"\v\f\v\x0E\vd\v\v\x03\v\x03\v\x05\vh\n\v\x03\f\x03\f\x03\r\x03\r\x03\r" +
		"\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x06\x0Fv\n\x0F\r" +
		"\x0F\x0E\x0Fw\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15" +
		"\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x06\x18\x99\n\x18\r\x18" +
		"\x0E\x18\x9A\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x04b\x9A\x02\x02" +
		"\x1A\x04\x02\x02\x06\x02\x03\b\x02\x04\n\x02\x02\f\x02\x05\x0E\x02\x06" +
		"\x10\x02\x02\x12\x02\x07\x14\x02\b\x16\x02\t\x18\x02\n\x1A\x02\x16\x1C" +
		"\x02\x02\x1E\x02\v \x02\f\"\x02\r$\x02\x0E&\x02\x0F(\x02\x10*\x02\x11" +
		",\x02\x12.\x02\x130\x02\x142\x02\x15\x04\x02\x03\x07\x05\x02C\\aac|\x06" +
		"\x022;C\\aac|\t\x02#(*1>B]]_`bb}\x80\x05\x02\v\f\x0F\x0F\"\"\x03\x02^" +
		"^\x02\xA5\x02\b\x03\x02\x02\x02\x02\n\x03\x02\x02\x02\x02\f\x03\x02\x02" +
		"\x02\x02\x0E\x03\x02\x02\x02\x02\x10\x03\x02\x02\x02\x02\x12\x03\x02\x02" +
		"\x02\x02\x14\x03\x02\x02\x02\x02\x16\x03\x02\x02\x02\x02\x18\x03\x02\x02" +
		"\x02\x02\x1A\x03\x02\x02\x02\x03\x1C\x03\x02\x02\x02\x03\x1E\x03\x02\x02" +
		"\x02\x03 \x03\x02\x02\x02\x03\"\x03\x02\x02\x02\x03$\x03\x02\x02\x02\x03" +
		"&\x03\x02\x02\x02\x03(\x03\x02\x02\x02\x03*\x03\x02\x02\x02\x03,\x03\x02" +
		"\x02\x02\x03.\x03\x02\x02\x02\x030\x03\x02\x02\x02\x032\x03\x02\x02\x02" +
		"\x044\x03\x02\x02\x02\x066\x03\x02\x02\x02\b=\x03\x02\x02\x02\nB\x03\x02" +
		"\x02\x02\fF\x03\x02\x02\x02\x0EI\x03\x02\x02\x02\x10N\x03\x02\x02\x02" +
		"\x12T\x03\x02\x02\x02\x14W\x03\x02\x02\x02\x16]\x03\x02\x02\x02\x18i\x03" +
		"\x02\x02\x02\x1Ak\x03\x02\x02\x02\x1Cp\x03\x02\x02\x02\x1Eu\x03\x02\x02" +
		"\x02 {\x03\x02\x02\x02\"~\x03\x02\x02\x02$\x82\x03\x02\x02\x02&\x88\x03" +
		"\x02\x02\x02(\x8F\x03\x02\x02\x02*\x91\x03\x02\x02\x02,\x93\x03\x02\x02" +
		"\x02.\x95\x03\x02\x02\x020\x98\x03\x02\x02\x022\x9C\x03\x02\x02\x0245" +
		"\x07)\x02\x025\x05\x03\x02\x02\x026:\t\x02\x02\x0279\t\x03\x02\x0287\x03" +
		"\x02\x02\x029<\x03\x02\x02\x02:8\x03\x02\x02\x02:;\x03\x02\x02\x02;\x07" +
		"\x03\x02\x02\x02<:\x03\x02\x02\x02=>\x071\x02\x02>?\x07,\x02\x02?@\x03" +
		"\x02\x02\x02@A\b\x04\x02\x02A\t\x03\x02\x02\x02BC\x05\x06\x03\x02CD\x03" +
		"\x02\x02\x02DE\b\x05\x03\x02E\v\x03\x02\x02\x02FG\x07#\x02\x02G\r\x03" +
		"\x02\x02\x02HJ\t\x03\x02\x02IH\x03\x02\x02\x02JK\x03\x02\x02\x02KI\x03" +
		"\x02\x02\x02KL\x03\x02\x02\x02L\x0F\x03\x02\x02\x02MO\t\x04\x02\x02NM" +
		"\x03\x02\x02\x02OP\x03\x02\x02\x02PN\x03\x02\x02\x02PQ\x03\x02\x02\x02" +
		"QR\x03\x02\x02\x02RS\b\b\x04\x02S\x11\x03\x02\x02\x02TU\x07=\x02\x02U" +
		"\x13\x03\x02\x02\x02VX\t\x05\x02\x02WV\x03\x02\x02\x02XY\x03\x02\x02\x02" +
		"YW\x03\x02\x02\x02YZ\x03\x02\x02\x02Z[\x03\x02\x02\x02[\\\b\n\x05\x02" +
		"\\\x15\x03\x02\x02\x02]g\x05\x04\x02\x02^h\x05\x04\x02\x02_a\v\x02\x02" +
		"\x02`_\x03\x02\x02\x02ad\x03\x02\x02\x02bc\x03\x02\x02\x02b`\x03\x02\x02" +
		"\x02ce\x03\x02\x02\x02db\x03\x02\x02\x02ef\n\x06\x02\x02fh\x05\x04\x02" +
		"\x02g^\x03\x02\x02\x02gb\x03\x02\x02\x02h\x17\x03\x02\x02\x02ij\x07<\x02" +
		"\x02j\x19\x03\x02\x02\x02kl\x07<\x02\x02lm\x07<\x02\x02mn\x03\x02\x02" +
		"\x02no\b\r\x04\x02o\x1B\x03\x02\x02\x02pq\x05\x06\x03\x02qr\x03\x02\x02" +
		"\x02rs\b\x0E\x03\x02s\x1D\x03\x02\x02\x02tv\t\x05\x02\x02ut\x03\x02\x02" +
		"\x02vw\x03\x02\x02\x02wu\x03\x02\x02\x02wx\x03\x02\x02\x02xy\x03\x02\x02" +
		"\x02yz\b\x0F\x05\x02z\x1F\x03\x02\x02\x02{|\x07/\x02\x02|}\x07@\x02\x02" +
		"}!\x03\x02\x02\x02~\x7F\x070\x02\x02\x7F\x80\x070\x02\x02\x80\x81\x07" +
		"0\x02\x02\x81#\x03\x02\x02\x02\x82\x83\x07B\x02\x02\x83\x84\x07p\x02\x02" +
		"\x84\x85\x07c\x02\x02\x85\x86\x07o\x02\x02\x86\x87\x07g\x02\x02\x87%\x03" +
		"\x02\x02\x02\x88\x89\x07B\x02\x02\x89\x8A\x07r\x02\x02\x8A\x8B\x07c\x02" +
		"\x02\x8B\x8C\x07t\x02\x02\x8C\x8D\x07c\x02\x02\x8D\x8E\x07o\x02\x02\x8E" +
		"\'\x03\x02\x02\x02\x8F\x90\x07*\x02\x02\x90)\x03\x02\x02\x02\x91\x92\x07" +
		"+\x02\x02\x92+\x03\x02\x02\x02\x93\x94\x07.\x02\x02\x94-\x03\x02\x02\x02" +
		"\x95\x96\x07#\x02\x02\x96/\x03\x02\x02\x02\x97\x99\v\x02\x02\x02\x98\x97" +
		"\x03\x02\x02\x02\x99\x9A\x03\x02\x02\x02\x9A\x9B\x03\x02\x02\x02\x9A\x98" +
		"\x03\x02\x02\x02\x9B1\x03\x02\x02\x02\x9C\x9D\x07,\x02\x02\x9D\x9E\x07" +
		"1\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F\xA0\b\x19\x06\x02\xA03\x03\x02\x02" +
		"\x02\f\x02\x03:KPYbgw\x9A\x07\x04\x03\x02\t\x03\x02\t\x06\x02\b\x02\x02" +
		"\x04\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SQLLexer.__ATN) {
			SQLLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SQLLexer._serializedATN));
		}

		return SQLLexer.__ATN;
	}

}

